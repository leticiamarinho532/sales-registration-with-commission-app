version: '3'
services:
  # app-frontend:
  #   container_name: app-frontend
  #   build:
  #     context: .
  #     dockerfile: ./front-end/dockerFile-app
  #   ports:
  #     - 5173:5173
  #   volumes:
  #     - ./front-end/:/usr/src/app/
  #   working_dir: /usr/src/app/
  #   depends_on:
  #     - app-nginx-back-end
  #   networks:
  #     - app-seller-registraion-with-commission-networks

  # app-nginx-front-end:
  #   container_name: app-nginx-front-end
  #   image: nginx:alpine
  #   restart: unless-stopped
  #   ports:
  #     - 8080:5173
  #   volumes:
  #     - ./front-end/:/var/www/
  #     - ./front-end/nginx:/etc/nginx/conf.d/
  #   depends_on:
  #     - app-frontend
  #   networks:
  #     - app-seller-registraion-with-commission-networks

  app-backend:
    container_name: app-backend
    build:
      context: .
      dockerfile: ./back-end/dockerFile-app
    volumes:
      - ./back-end/:/var/www/
    working_dir: /var/www/
    depends_on:
      - dependency-manager-composer-back-end
      - db
    networks:
      - app-seller-registraion-with-commission-networks

  app-nginx-back-end:
    container_name: app-nginx-back-end
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - 8081:80
    volumes:
      - ./back-end/:/var/www/
      - ./back-end/nginx:/etc/nginx/conf.d/
    depends_on:
      - app-backend
    networks:
      - app-seller-registraion-with-commission-networks

  db:
    container_name: db
    image: mysql
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: example
    networks:
      - app-seller-registraion-with-commission-networks
  
  db-adminer:
    container_name: db-adminer
    image: adminer
    restart: always
    environment:
      ADMINER_DEFAULT_SERVER: db
    ports:
      - 8082:8080
    depends_on:
      - db
    networks:
      - app-seller-registraion-with-commission-networks
  
  dependency-manager-composer-back-end:
    container_name: dependency-manager-composer-back-end
    build:
        context: .
        dockerfile: ./back-end/dockerFile-dependency-manager-composer
    command: composer install
    volumes:
        - ./back-end/:/var/www/

  # cron:
  #   build:
  #     context: .
  #     dockerfile: ./back-end/dockerFile-cron
  #   container_name: cron
  #   volumes:
  #     - ./back-end/:/var/www/
  #   depends_on:
  #     - app-backend
  #   networks:
  #     - app-seller-registraion-with-commission-networks


networks:
  app-seller-registraion-with-commission-networks:
    driver: bridge